---
import ResumeLayout from '../layouts/ResumeLayout.astro'
import { projects, categoryOrder, type Project } from '../lib/projects'
import { education } from '../lib/education'
import { Button } from '~/components/ui/button'
import Link from '~/components/Link'
import { person, contactLinks, languages, tagline } from '~/lib/constants'

const included = projects.filter((p) => p.resume !== false)

const grouped = categoryOrder.reduce(
  (acc, cat) => {
    const list = included.filter((p) => p.category === cat)
    if (list.length) acc.push({ category: cat, items: list })
    return acc
  },
  [] as { category: (typeof categoryOrder)[number]; items: Project[] }[],
)

const allTags = included.flatMap((p) => [...p.tags, ...(p.hiddenTags ?? [])])
const tagCounts = allTags.reduce(
  (acc, tag) => {
    acc[tag] = (acc[tag] || 0) + 1
    return acc
  },
  {} as Record<string, number>,
)
const sortedTags = Object.entries(tagCounts)
  .sort(([, a], [, b]) => b - a)
  .map(([tag, count]) => ({ tag, count }))
  .filter(({ count }) => count >= 2)
---

<ResumeLayout>
  <main class="mx-auto max-w-4xl w-full px-4 py-10 sm:px-6 lg:px-8">
    <div class="flex items-start justify-between gap-4">
      <div>
        <h1 class="text-3xl font-bold tracking-tight sm:text-4xl">{person.name}</h1>
        <p class="mt-3 text-muted-foreground max-w-prose">{tagline}</p>
      </div>
      <div class="flex gap-3">
        <Button id="back-button" variant="outline" size="icon" class="no-print">
          <span class="i-ph:arrow-left-bold size-5"></span>
        </Button>
        <Button id="print-button" variant="outline" class="no-print">
          <span class="i-ph:printer-duotone size-5"></span>
          Print
        </Button>
      </div>
    </div>

    <div class="mt-4 text-sm flex flex-wrap items-center gap-x-4 gap-y-1 text-foreground/80">
      {
        contactLinks.map((link, i) => (
          <>
            <Link href={link.href} external variant="underline">
              {link.title}
            </Link>
            {i < contactLinks.length - 1 && <span class="op-50">•</span>}
          </>
        ))
      }
    </div>

    <section class="mt-8">
      <h2 class="section-title text-xl font-semibold">Languages</h2>
      <ul class="mt-2 text-sm text-foreground/80 flex flex-wrap gap-x-4 gap-y-1">
        {
          languages.map((lang) => (
            <li>
              {lang.name} ({lang.level})
            </li>
          ))
        }
      </ul>
    </section>

    <section class="mt-10">
      {
        education.length > 0 && (
          <section class="mt-10">
            <h2 class="section-title text-xl font-semibold">Education</h2>
            <ul class="mt-5 space-y-2">
              {education.map((e) => (
                <li class="avoid-break">
                  <div class="flex items-baseline justify-between gap-3">
                    <div class="font-medium">
                      {e.school} — {e.program}
                    </div>
                    <div class="text-xs text-foreground/60 whitespace-nowrap">{e.period}</div>
                  </div>
                  {e.note && <div class="text-sm text-muted-foreground">{e.note}</div>}
                </li>
              ))}
            </ul>
          </section>
        )
      }

      <section class="mt-10 resume-skills">
        <h2 class="section-title text-xl font-semibold">Experience</h2>
        <div class="skills-list mt-3 flex flex-wrap gap-2 text-sm">
          {
            sortedTags.map(({ tag, count }) => (
              <span class="border rounded-full px-2.5 py-0.5 font-semibold">
                {tag}
                <span class="op-60 text-xs">×{count}</span>
              </span>
            ))
          }
        </div>
      </section>

      <section class="mt-10 resume-projects">
        <h2 class="section-title text-xl font-semibold">Projects</h2>
        {
          grouped.map(({ category, items }) => (
            <section class="mt-6">
              <h3 class="text-sm tracking-wide uppercase op-70">{category}</h3>
              <ul class="mt-5 space-y-3">
                {items.map((p) => (
                  <li class="avoid-break resume-project-item border rounded-md p-3 bg-card text-card-foreground">
                    <div class="flex items-baseline justify-between gap-3">
                      <div class="font-medium">
                        <span>{p.name}</span>
                      </div>
                      <div class="text-xs text-foreground/60 whitespace-nowrap flex items-center gap-2">
                        {p.url && (
                          <span>
                            <Link href={p.url} external variant="underline" class="text-xs">
                              View
                            </Link>
                          </span>
                        )}
                        {p.githubUrl && (
                          <span>
                            <Link href={p.githubUrl} external variant="underline" class="text-xs">
                              GitHub
                            </Link>
                          </span>
                        )}
                      </div>
                    </div>
                    <p class="mt-1 text-sm text-muted-foreground">{p.description}</p>
                    <div class="tags-list mt-2 text-xs text-foreground/70 flex flex-wrap gap-1.5">
                      {(p.tags || []).slice(0, 6).map((tag) => (
                        <span class="border rounded-full px-2 py-0.5">{tag}</span>
                      ))}
                    </div>
                  </li>
                ))}
              </ul>
            </section>
          ))
        }
      </section>
    </section>
  </main>
</ResumeLayout>

<script>
  document.getElementById('back-button')?.addEventListener('click', () => {
    window.history.back()
  })
  document.getElementById('print-button')?.addEventListener('click', () => {
    window.print()
  })
</script>
